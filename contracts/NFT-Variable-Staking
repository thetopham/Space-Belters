// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";



interface NFTupgrade {
    function getNFTLevel(uint256 _tokenId) external view returns (uint256);
}

contract ERC721Staking is Ownable, ReentrancyGuard, Pausable {
    using SafeERC20 for IERC20;

    IERC20 public immutable rewardsToken;
    IERC721 public immutable nftCollection;
    NFTupgrade public upgradeContract;

    uint256 constant SECONDS_IN_HOUR = 3600;

    struct Staker {
        uint256[] stakedTokenIds;
        uint256 timeOfLastUpdate;
        uint256 unclaimedRewards;
    }
    
    mapping(address => Staker) public stakers;
    mapping(uint256 => address) public stakerAddress;
    address[] public stakersArray;
    mapping(address => uint256) public stakerToArrayIndex;
    mapping(uint256 => uint256) public tokenIdToArrayIndex;

    constructor(
        IERC721 _nftCollection,
        IERC20 _rewardsToken,
        NFTupgrade _upgradeContract
    ) {
        nftCollection = _nftCollection;
        rewardsToken = _rewardsToken;
        upgradeContract = _upgradeContract;
    }

    function setUpgradeContract(NFTupgrade _upgradeContract) external onlyOwner {
        upgradeContract = _upgradeContract;
    }

    function getNFTLevel(uint256 _tokenId) public view returns (uint256) {
    return upgradeContract.getNFTLevel(_tokenId);
}


    function stake(uint256[] calldata _tokenIds) external whenNotPaused {
        Staker storage staker = stakers[msg.sender];

        if (staker.stakedTokenIds.length > 0) {
            updateRewards(msg.sender);
        } else {
            stakersArray.push(msg.sender);
            stakerToArrayIndex[msg.sender] = stakersArray.length - 1;
            staker.timeOfLastUpdate = block.timestamp;
        }

        uint256 len = _tokenIds.length;
        for (uint256 i; i < len; ++i) {
            require(nftCollection.ownerOf(_tokenIds[i]) == msg.sender, "Can't stake tokens you don't own!");

            nftCollection.safeTransferFrom(msg.sender, address(this), _tokenIds[i]);

            staker.stakedTokenIds.push(_tokenIds[i]);
            tokenIdToArrayIndex[_tokenIds[i]] = staker.stakedTokenIds.length - 1;
            stakerAddress[_tokenIds[i]] = msg.sender;
        }
    }

    function withdraw(uint256[] calldata _tokenIds) external nonReentrant {
        Staker storage staker = stakers[msg.sender];
        require(staker.stakedTokenIds.length > 0, "You have no tokens staked");
        updateRewards(msg.sender);

        uint256 lenToWithdraw = _tokenIds.length;
        for (uint256 i; i < lenToWithdraw; ++i) {
            require(stakerAddress[_tokenIds[i]] == msg.sender);

            uint256 index = tokenIdToArrayIndex[_tokenIds[i]];
            uint256 lastTokenIndex = staker.stakedTokenIds.length - 1;
            if (index != lastTokenIndex) {
                staker.stakedTokenIds[index] = staker.stakedTokenIds[lastTokenIndex];
                tokenIdToArrayIndex[staker.stakedTokenIds[index]] = index;
            }
            staker.stakedTokenIds.pop();

            delete stakerAddress[_tokenIds[i]];

            nftCollection.safeTransferFrom(address(this), msg.sender, _tokenIds[i]);
        }

        if (staker.stakedTokenIds.length == 0) {
            uint256 index = stakerToArrayIndex[msg.sender];
            uint256 lastStakerIndex = stakersArray.length - 1;
            if (index != lastStakerIndex) {
                stakersArray[index] = stakersArray[lastStakerIndex];
                stakerToArrayIndex[stakersArray[index]] = index;
            }
            stakersArray.pop();
        }
    }

    function claimRewards() external {
        Staker storage staker = stakers[msg.sender];

        uint256 rewards = calculateReward(msg.sender) + staker.unclaimedRewards;
        require(rewards > 0, "You have no rewards to claim");

        staker.timeOfLastUpdate = block.timestamp;
        staker.unclaimedRewards = 0;

        rewardsToken.safeTransfer(msg.sender, rewards);
    }

    

    function userStakeInfo(address _user)
        public
        view
        returns (uint256[] memory _stakedTokenIds, uint256 _availableRewards)
    {
        return (stakers[_user].stakedTokenIds, availableRewards(_user));
    }

    function availableRewards(address _user) internal view returns (uint256 _rewards) {
        Staker memory staker = stakers[_user];

        if (staker.stakedTokenIds.length == 0) {
            return staker.unclaimedRewards;
        }

        _rewards = staker.unclaimedRewards + calculateReward(_user);
    } 

function calculateReward(address _staker) public view returns (uint256) {
    Staker memory staker = stakers[_staker];
    uint256 totalReward = 0;

    for (uint256 i = 0; i < staker.stakedTokenIds.length; i++) {
        uint256 tokenId = staker.stakedTokenIds[i];
        uint256 nftLevel = upgradeContract.getNFTLevel(tokenId);
        uint256 timeStaked = block.timestamp - staker.timeOfLastUpdate;

        
        uint256[60] memory rewardsPerHour = [
           uint256(500000000000000000), 1025000000000000000, 1576250000000000000, 2155062500000000000, 2762815625000000000, 3400956406250000000, 4071004226562500000, 4774554437890630000,
            5513282159785160000, 6288946267774420000, 7103393581163140000, 7958563260221300000, 8856491423232370000, 9799315994393990000, 10789281794113700000, 11828745522932500000,
            12920183178010300000, 14066192336910900000, 15269501953756400000, 16529501953756400000, 17856042675707600000, 19250383842948000000, 20722097456727800000, 22250220646555600000,
            23856320289092600000, 25556626879413600000, 27334563223415800000, 29201291384586600000, 31161355953815900000, 33219423751506700000, 35380494939082000000, 37654788701036200000,
            40044276212464500000, 42551115776603600000, 45177648870036100000, 47925161359785600000, 50814098693841000000, 53854772889196500000, 57051244968441800000, 60408032758629000000,
            63920915544044400000, 67595913529542600000, 71539552479138700000, 75574239473015600000, 79852221978723200000, 84338181831674700000, 89057077934287000000, 94012276018498400000,
            99213335727892400000, 104673997857537000000, 110407697750414000000, 116428082637935000000, 122749486769831000000, 129386961108323000000, 136356309163739000000, 143674124621926000000,
            151357830853022000000, 159425722395673000000, 167897008515457000000, 176791858941230000000
        ];

        require(nftLevel > 0 && nftLevel <= rewardsPerHour.length, "Invalid level");

        uint256 rewardAmount = rewardsPerHour[nftLevel - 1] / 3600; // Assuming the provided rewards are per hour

        uint256 reward = timeStaked * rewardAmount;
        totalReward += reward; // Update totalReward by adding the reward for the current token
    }

    return totalReward + staker.unclaimedRewards;
}

     function updateRewards(address _staker) internal {
        Staker storage staker = stakers[_staker];

        staker.unclaimedRewards += calculateReward(_staker);
        staker.timeOfLastUpdate = block.timestamp;
    }

    function pause() external onlyOwner {
        _pause();
    }

     function unpause() external onlyOwner {
        _unpause();
    }
}

